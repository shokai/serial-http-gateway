#!/usr/bin/env ruby
require 'rubygems'
gem 'serialport','>=1.0.4'
require 'serialport'
require 'eventmachine'
require 'evma_httpserver'
require 'ArgsParser'
require 'json'

parser = ArgsParser.parser
parser.bind(:help, :h, 'show help')
parser.comment(:bps, 'bit per second', 9600)
parser.comment(:bit, 'bit(7-9)', 8)
parser.comment(:stopbit, 'stopbit', 1)
parser.comment(:parity, 'parity bit', 0)
parser.comment(:port, 'HTTP Server Port', 8783)
serial_device, params = parser.parse(ARGV)

if !serial_device or parser.has_option(:help)
  puts parser.help
  if RUBY_PLATFORM =~ /mswin|mingw|cygwin|bccwin/
    puts 'e.g. serial-http-gateway COM1'
    puts '     serial-http-gateway COM1 -bps 9600 -bit 8 -stopbit 1 -parity 0 -port 8783'
  else
    puts 'e.g. serial-http-gateway /dev/tty.your-device'
    puts '     serial-http-gateway /dev/tty.your-device -bps 9600 -bit 8 -stopbit 1 -parity 0 -port 8783'
  end
  exit 1
end

begin
  @@sp = SerialPort.new(serial_device, params[:bps].to_i, params[:bit].to_i, params[:stopbit].to_i, params[:parity].to_i) # 9600bps, 8bit, stopbit 1, parity none
rescue => e
  STDERR.puts 'cannot open serialport!!'
  STDERR.puts e.to_s
  exit 1
end

@@recvs = Array.new

class Handler  < EventMachine::Connection
  include EventMachine::HttpServer
  
  def process_http_request
    res = EventMachine::DelegatedHttpResponse.new(self)
    puts "[http] #{@http_request_method} #{@http_path_info} #{@http_query_string} #{@http_post_content}"
    if @http_request_method == 'GET'
      res.status = 200
      res.content = @@recvs.to_json
      res.send_response
    elsif @http_request_method == 'POST'
      res.status = 200
      @@sp.puts @http_post_content
      res.content = @@recvs.to_json
      res.send_response
    end
  end
end


EM::run do
  
  EM::defer do
    loop do
      data = @@sp.gets.gsub(/[\r\n]/,'')
      data = data.to_i if data =~ /^\d+$/
      next if !data or data.to_s.size < 1
      now = Time.now.to_i*1000+(Time.now.usec/1000.0).round
      @@recvs.unshift({:time => now, :data => data})
      while @@recvs.size > 100 do
        @@recvs.pop
      end
      puts data
    end
  end

  EventMachine::defer do
    loop do
      line = gets.gsub(/[\r\n]/,'')
      next if !line or line.to_s.size < 1
      @@sp.puts line
    end
  end

  EventMachine::start_server("0.0.0.0", params[:port], Handler)
  puts "starting http server.."
  puts " => port #{params[:port]}"

end
